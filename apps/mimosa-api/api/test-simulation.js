#!/usr/bin/env node

/**
 * Script de test pour simuler des IPs diff√©rentes via le header X-Fake-IP
 * Usage: node test-simulation.js
 */

import http from 'http';

const BASE_URL = 'http://localhost:8080';

// Configuration du limiteur (doit correspondre √† celle du serveur)
const THRESHOLD_RPS = 10;
const PATH_DIVERSITY = 5;

function makeRequest(path, fakeIp = null) {
    return new Promise((resolve, reject) => {
        const options = {
            hostname: 'localhost',
            port: 8080,
            path: path,
            method: 'GET',
            headers: {}
        };

        if (fakeIp) {
            options.headers['X-Fake-IP'] = fakeIp;
        }

        const req = http.request(options, (res) => {
            let data = '';
            res.on('data', (chunk) => data += chunk);
            res.on('end', () => {
                try {
                    const json = JSON.parse(data);
                    resolve({ status: res.statusCode, data: json });
                } catch (e) {
                    resolve({ status: res.statusCode, data: data });
                }
            });
        });

        req.on('error', reject);
        req.end();
    });
}

async function testSimulation() {
    console.log('üß™ Test de simulation d\'IP avec X-Fake-IP header\n');

    // Test 1: IP normale (sans header)
    console.log('1Ô∏è‚É£ Test IP normale (sans header X-Fake-IP):');
    try {
        const result1 = await makeRequest('/api/data');
        console.log(`   Status: ${result1.status}`);
        console.log(`   Response: ${JSON.stringify(result1.data)}\n`);
    } catch (error) {
        console.log(`   Erreur: ${error.message}\n`);
    }

    // Test 2: IP simul√©e "192.168.1.100"
    console.log('2Ô∏è‚É£ Test IP simul√©e "192.168.1.100":');
    try {
        const result2 = await makeRequest('/api/data', '192.168.1.100');
        console.log(`   Status: ${result2.status}`);
        console.log(`   Response: ${JSON.stringify(result2.data)}\n`);
    } catch (error) {
        console.log(`   Erreur: ${error.message}\n`);
    }

    // Test 3: IP simul√©e "10.0.0.1" - d√©clenchement du limiteur
    console.log('3Ô∏è‚É£ Test IP simul√©e "10.0.0.1" - d√©clenchement du limiteur:');
    console.log('   Envoi de plusieurs requ√™tes rapides...');
    
    for (let i = 0; i < 15; i++) {
        try {
            const result = await makeRequest('/api/data', '10.0.0.1');
            console.log(`   Requ√™te ${i + 1}: Status ${result.status} - ${result.data.status || 'OK'}`);
            
            if (result.status === 429) {
                console.log(`   üö® IP 10.0.0.1 bloqu√©e! TTL: ${result.data.ttlMs}ms`);
                break;
            }
        } catch (error) {
            console.log(`   Erreur requ√™te ${i + 1}: ${error.message}`);
        }
        
        // Petite pause pour √©viter de surcharger
        await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.log('\n4Ô∏è‚É£ Test diversit√© de chemins avec IP "10.0.0.2":');
    console.log('   Envoi de requ√™tes vers diff√©rents endpoints...');
    
    const paths = ['/api/data', '/api/noisy/1', '/api/noisy/2', '/api/noisy/3', '/api/noisy/4', '/api/noisy/5'];
    
    for (let i = 0; i < paths.length; i++) {
        try {
            const result = await makeRequest(paths[i], '10.0.0.2');
            console.log(`   ${paths[i]}: Status ${result.status} - ${result.data.status || 'OK'}`);
            
            if (result.status === 429) {
                console.log(`   üö® IP 10.0.0.2 bloqu√©e par diversit√©! TTL: ${result.data.ttlMs}ms`);
                break;
            }
        } catch (error) {
            console.log(`   Erreur ${paths[i]}: ${error.message}`);
        }
        
        await new Promise(resolve => setTimeout(resolve, 200));
    }

    console.log('\n‚úÖ Tests termin√©s!');
    console.log('\nüí° Conseils:');
    console.log('   - V√©rifiez les logs du serveur pour voir les IPs simul√©es');
    console.log('   - Le dashboard √† http://localhost:8080 montre l\'√©tat des IPs');
    console.log('   - Les IPs simul√©es sont trait√©es ind√©pendamment des vraies IPs');
}

// V√©rifier que le serveur est en cours d'ex√©cution
makeRequest('/api/config').then(() => {
    testSimulation();
}).catch((error) => {
    console.error('‚ùå Impossible de se connecter au serveur Mimosa API');
    console.error('   Assurez-vous que le serveur est d√©marr√© sur http://localhost:8080');
    console.error('   Erreur:', error.message);
    process.exit(1);
});
